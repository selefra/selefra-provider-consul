// Code generated by https://github.com/selefra/selefra-terraform-provider-scaffolding DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***
package resources


import (
	"context"
	"github.com/selefra/selefra-provider-sdk/provider/schema"
	"github.com/selefra/selefra-provider-sdk/table_schema_generator"
    "github.com/selefra/selefra-provider-sdk/terraform/bridge"
    "github.com/selefra/selefra-provider-sdk/terraform/column_value_extractor" 
)




// consul_acl_policy
func TableSchemaGenerator_consul_acl_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_acl_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_acl_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_acl_policy
func GetColumns_consul_acl_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenters").ColumnType(schema.ColumnTypeJSON).Description("The ACL policy datacenters.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Description("The ACL policy description.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("The ACL policy name.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition").ColumnType(schema.ColumnTypeString).Description("The partition the ACL policy is associated with.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rules").ColumnType(schema.ColumnTypeString).Description("The ACL policy rules.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_service
func TableSchemaGenerator_consul_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_service
func GetColumns_consul_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_tag_override").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("meta").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition").ColumnType(schema.ColumnTypeString).Description("The partition the service is associated with.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("check").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_certificate_authority
func TableSchemaGenerator_consul_certificate_authority() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_certificate_authority().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_certificate_authority()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_certificate_authority
func GetColumns_consul_certificate_authority() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connect_provider").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_config_entry
func TableSchemaGenerator_consul_config_entry() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_config_entry().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_config_entry()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_config_entry
func GetColumns_consul_config_entry() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("config_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition").ColumnType(schema.ColumnTypeString).Description("The partition the config entry is associated with.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_prepared_query
func TableSchemaGenerator_consul_prepared_query() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_prepared_query().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_prepared_query()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_prepared_query
func GetColumns_consul_prepared_query() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("near").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_meta").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("only_passing").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("failover").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ignore_check_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("session").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_meta").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connect").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stored_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_intention
func TableSchemaGenerator_consul_intention() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_intention().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_intention()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_intention
func GetColumns_consul_intention() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("source_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("meta").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_agent_service
func TableSchemaGenerator_consul_agent_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_agent_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_agent_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_agent_service
func GetColumns_consul_agent_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_catalog_entry
func TableSchemaGenerator_consul_catalog_entry() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_catalog_entry().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_catalog_entry()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_catalog_entry
func GetColumns_consul_catalog_entry() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_acl_token_policy_attachment
func TableSchemaGenerator_consul_acl_token_policy_attachment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_acl_token_policy_attachment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_acl_token_policy_attachment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_acl_token_policy_attachment
func GetColumns_consul_acl_token_policy_attachment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy").ColumnType(schema.ColumnTypeString).Description("The policy name.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_id").ColumnType(schema.ColumnTypeString).Description("The token accessor id.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_acl_token_role_attachment
func TableSchemaGenerator_consul_acl_token_role_attachment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_acl_token_role_attachment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_acl_token_role_attachment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_acl_token_role_attachment
func GetColumns_consul_acl_token_role_attachment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role").ColumnType(schema.ColumnTypeString).Description("The role name.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_id").ColumnType(schema.ColumnTypeString).Description("The token accessor id.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_autopilot_config
func TableSchemaGenerator_consul_autopilot_config() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_autopilot_config().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_autopilot_config()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_autopilot_config
func GetColumns_consul_autopilot_config() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_trailing_logs").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_stabilization_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_version_tag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cleanup_dead_servers").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_upgrade_migration").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("last_contact_threshold").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redundancy_zone_tag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_acl_token
func TableSchemaGenerator_consul_acl_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_acl_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_acl_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_acl_token
func GetColumns_consul_acl_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("local").ColumnType(schema.ColumnTypeBool).Description("Flag to set the token local to the current datacenter.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policies").ColumnType(schema.ColumnTypeJSON).Description("List of policies.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).Description("List of roles").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_identities").ColumnType(schema.ColumnTypeJSON).Description("The list of node identities that should be applied to the token.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("accessor_id").ColumnType(schema.ColumnTypeString).Description("The token id.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Description("The token description.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_time").ColumnType(schema.ColumnTypeString).Description("If set this represents the point after which a token should be considered revoked and is eligible for destruction.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition").ColumnType(schema.ColumnTypeString).Description("The partition the ACL token is associated with.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_identities").ColumnType(schema.ColumnTypeJSON).Description("The list of service identities that should be applied to the token.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_node
func TableSchemaGenerator_consul_node() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_node().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_node()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_node
func GetColumns_consul_node() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("meta").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition").ColumnType(schema.ColumnTypeString).Description("The partition the node is associated with.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datacenter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// consul_acl_role
func TableSchemaGenerator_consul_acl_role() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_consul_acl_role().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_consul_acl_role()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// consul_acl_role
func GetColumns_consul_acl_role() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("The name of the ACL role.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition").ColumnType(schema.ColumnTypeString).Description("The partition the ACL role is associated with.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policies").ColumnType(schema.ColumnTypeJSON).Description("The list of policies that should be applied to the role.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_identities").ColumnType(schema.ColumnTypeJSON).Description("The list of node identities that should be applied to the role.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_identities").ColumnType(schema.ColumnTypeJSON).Description("The list of service identities that should be applied to the role.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Description("A free form human readable description of the role.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}


